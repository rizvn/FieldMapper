{"name":"Field Mapper","tagline":"A library to convert a list of maps to a list of objects. ","body":"# FieldMapper and ResultMap\r\nA library to convert list of maps `List<Map<String,Object>>` to a list of objects. It can be used with database access libraries such as spring jdbc, and JDBI which can return a list of maps from queries.\r\n\r\n**ResultMap** can be used where classes are not required. So you can convert `List<Map<String, Object>>` to `List<ResultMap>` and have convenient methods to access values with types.\r\n\r\n##Maven\r\nThe jars are hosted in github repo:\r\n\r\n      <repositories>\r\n            <repository>\r\n                <id>FieldMapper Repo</id>\r\n                <url>https://raw.github.com/rizvn/FieldMapper/mvn-repo/</url>\r\n            </repository>\r\n      </repositories>\r\n\r\nThe maven dependency is:\r\n\r\n    <dependency>\r\n       <groupId>com.rizvn</groupId>\r\n       <artifactId>fieldMapper</artifactId>\r\n       <version>0.1.2</version>\r\n    </dependency>\r\n\r\n## Usage\r\nExample table schema:\r\n\r\n      create table users(\r\n         id serial, \r\n         firstName varchar(255), \r\n         lastName varchar(255), \r\n         email varchar(255), \r\n         lastUpdated TIMESTAMP)\r\n\r\n#### 1. Create class, and annotate fields with @Column (com.rizvn.fieldmapper.annotation.Column)\r\nDefine a class to which we want to map results to.\r\n\r\n    public class User {\r\n       @Column\r\n       String firstName;\r\n\r\n       @Column(\"lastName\") //names are optional\r\n       String lastName;\r\n\r\n       @Column\r\n       String email;\r\n      \r\n       @Column(typeHandler = TimestampToJodaDateTime.class)\r\n       DateTime lastUpdated;\r\n       \r\n       /** Getters and setters */\r\n    }\r\n\r\n#### 2. Run query\r\nRun the query and return a list of maps. Below is a Spring JDBC Template example.\r\n    \r\n    List<Map<String, Object>> results = jdbcTemplate.queryForList(\"SELECT * FROM USERS\");\r\n\r\n#### 3. Convert maps to objects\r\nNow we call `FieldMapper.mapListToObjectList(..)` to map the list of maps to list of objects\r\n\r\n    List<User> users = FieldMapper.mapListToObjectList(results, User.class);\r\n\r\n\r\n## @Column\r\nBy default FieldMapper will look for the key that matches the instance variable name in the map. You can override this behavior by specifying the database column name manually i.e `@Column('FIRST_NAME')`.\r\n\r\nOnce the key is found, instance variable value will be set to the key's value. It will transparently handle most java types. However you may provide your own handlers through the `typeHandler` attribute on @Column `@Column(typeHandler = TimestampToJodaDateTime.class)`\r\n\r\n##TypeHandler\r\nBelow is the TypeHandler interface\r\n\r\n    public interface TypeHandler {\r\n      public <TargetType> TargetType transform(Object src);\r\n    }\r\n\r\nIt takes value from the map and returns the transformed value, which will be set as the instance variable value.\r\n\r\nBelow is the code for `TimestampToJodaDateTime` Type handler used in the User Class example above. `java.sql.Timestamp` is converted  to a DateTime object. The returned value will be set as instance variable value.\r\n\r\n    public class TimestampToJodaDateTime implements TypeHandler{\r\n      @Override\r\n      public DateTime transform(Object src) {\r\n        Timestamp timestamp = (Timestamp) src;\r\n        return new DateTime(timestamp);\r\n      }\r\n    }\r\n\r\n\r\n#ResultMap\r\nIf you don't want to create classes, you can use use the ResultMap. ResultMap extends HashMap with 4 additional methods:\r\n\r\n* `<T> T getTyped(String key)`\r\n* `<T> T getTyped(String key, TypeHandler typeHandler)`\r\n* `<T> T getTyped(Enum keyEnum)`\r\n* `<T> T getTyped(Enum keyEnum, TypeHandler typeHandler)`\r\n\r\nYou can transform any `List<Map<String, Object>>` to `List<ResultMap>` by calling `ResultMap.create(...)`\r\n\r\n##Result Map Example\r\n\r\n    //Transform list of maps to list of result map\r\n    List<ResultMap> results = ResultMap.create(jdbcTemplate.queryForList(\"SELECT * FROM USERS\"));\r\n\r\n    //get typed value, specifying the key as a string\r\n    String firstName = results.get(0).getTyped(\"FIRSTNAME\");\r\n\r\n    //get lastUpdated as Joda DateTime using typeHandler\r\n    DateTime lastUpdated = results.get(0).getTyped(\"LASTUPDATED\", new TimestampToJodaDateTime());\r\n\r\n\r\nFor Convenience there are also enum versions of the getTyped methods. Below is an example\r\n\r\n    static enum Users{\r\n        FIRSTNAME, LASTUPDATED\r\n    }\r\n\r\n    List<ResultMap> results = ResultMap.create(jdbcTemplate.queryForList(\"SELECT * FROM USERS\"));\r\n\r\n    //get typed value, using enum\r\n    String firstName = results.get(0).getTyped(Users.FIRSTNAME);\r\n\r\n    //get lastUpdated as Joda DateTime using typeHandler\r\n    DateTime lastUpdated = results.get(0).getTyped(Users.LASTUPDATED, new TimestampToJodaDateTime());\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}