{"name":"Fieldmapper","tagline":"A library to convert a list of maps to a list of objects. ","body":"# Field Mapper\r\nA library to convert list of maps `List<Map<String,Object>>` to a list of objects. It can be used with database access libraries such as spring jdbc, and JDBI which can return a list of maps from queries.\r\n\r\n##Maven\r\nThe jars are hosted in github repo:\r\n\r\n      <repositories>\r\n            <repository>\r\n                <id>FieldMapper Repo</id>\r\n                <url>https://raw.github.com/rizvn/FieldMapper/mvn-repo/</url>\r\n            </repository>\r\n      </repositories>\r\n\r\nThe maven dependency is:\r\n\r\n    <dependency>\r\n       <groupId>com.rizvn</groupId>\r\n       <artifactId>fieldMapper</artifactId>\r\n       <version>0.1</version>\r\n    </dependency>\r\n\r\n## Usage\r\nExample table schema:\r\n\r\n      create table users(\r\n         id serial, \r\n         firstName varchar(255), \r\n         lastName varchar(255), \r\n         email varchar(255), \r\n         lastUpdated TIMESTAMP)\r\n\r\n#### 1. Create class, and annotate fields with @Column\r\nWe want to run a query to select all users and map the results to a User class. So we first defined a user class\r\n\r\n    public class User {\r\n       @Column\r\n       String firstName;\r\n\r\n       @Column(\"lastName\")\r\n       String lastName;\r\n\r\n       @Column\r\n       String email;\r\n      \r\n       @Column(typeHandler = TimestampToJodaDateTime.class)\r\n       DateTime lastUpdated;\r\n       \r\n       /** Getters and setters */\r\n    }\r\n\r\n#### 2. Run query\r\nNow use spring's jdbcTemplate to run the query and return a list of maps.\r\n    \r\n    List<Map<String, Object>> results = jdbcTemplate.queryForList(\"SELECT * FROM USERS\");\r\n\r\n#### 3. Convert maps to objects\r\nNow we call `FieldMapper.mapListToObjectList(..)` to map the list of maps to list of objects\r\n\r\n    List<User> users = FieldMapper.mapListToObjectList(results, User.class);\r\n\r\n\r\n## @Column\r\nBy default FieldMapper will look for the key that matches the instance variable name in the map. You can override this behavior by specifying the database column name manually `@Column('FIRST_NAME')`.\r\n\r\nOnce the key is found, instance variable value will be set to the key's value. It will transparently handle most java types. However you may provide your own handlers through the `typeHandler` attribute on @Column `@Column(typeHandler = TimestampToJodaDateTime.class)`\r\n\r\n##TypeHandler\r\nBelow is the type handler interface\r\n\r\n    public interface TypeHandler {\r\n      public <TargetType> TargetType transform(Object src);\r\n    }\r\n\r\nIt takes the key's the value, transforms it, and returns a new value to be set as instance variable value.\r\n\r\nBelow is the code for `TimestampToJodaDateTime` type handle used in the User Class example above. `java.sql.Timestamp` is converted  to a DateTime object. The returned value will be set as instance variable value.\r\n\r\n    public class TimestampToJodaDateTime implements TypeHandler{\r\n      @Override\r\n      public DateTime transform(Object src) {\r\n        Timestamp timestamp = (Timestamp) src;\r\n        return new DateTime(timestamp);\r\n      }\r\n    }\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}